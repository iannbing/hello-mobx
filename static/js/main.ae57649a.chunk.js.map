{"version":3,"sources":["components/Page.js","components/Checkbox.js","TodoList/TodoListItem.js","components/Card.js","components/Input.js","TodoList/Search.js","Fetcher.js","TodoList/getEmptyText.js","TodoList/index.js","App.js","serviceWorker.js","store/TodoListStore.js","store/index.js","index.js"],"names":["Page","styled","width","height","display","justifyContent","alignItems","paddingTop","paddingBottom","background","Circle","border","borderRadius","CustomIcon","icon_default","a","color","> svg","fontSize","Checkbox","_ref","checked","react_default","createElement","type","TodoListItem","inject","observer","getDeleteFn","title","Object","asyncToGenerator","regenerator_default","mark","_callee","e","todoList","wrap","_context","prev","next","_this","props","remove","stop","this","_x","apply","arguments","onChangeItemState","toggle","item","list_default","Item","actions","onClick","style","cursor","Meta","avatar","components_Checkbox","done","React","Component","MyCard","card_default","boxShadow","minWidth","MyInput","input_default","Search","state","inputValue","setInputValue","setValue","setState","getValue","get_default","onType","addItem","trim","getItem","add","Input","placeholder","size","value","onChange","onPressEnter","fetch","key","retrievedObject","localStorage","abrupt","JSON","parse","getEmptyText","Fragment","fontWeight","role","aria-label","TODO_LIST","TodoList","loadTodoList","data","sent","load","getVisibleTodoItems","getSearchResults","emptyText","todoItems","Card","TodoList_Search","itemLayout","dataSource","locale","renderItem","TodoList_TodoListItem","App","components_Page","src_TodoList","Boolean","window","location","hostname","match","TodoItem","types","model","string","self","items","array","push","filter","find","views","searchTerm","toJS","includes","create","reaction","map","toJSON","stringify","setItem","store","ReactDOM","render","index_module","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae57649a.chunk.js","sourcesContent":["import styled from 'react-emotion';\n\nconst Page = styled('div')({\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'flex-start',\n  paddingTop: 250,\n  paddingBottom: 100,\n  background: '#f7f7f7'\n});\n\nexport default Page;\n","import React from 'react';\nimport styled from 'react-emotion';\nimport { Icon } from 'antd';\n\nconst iconSize = 26;\n\nconst Circle = styled('div')({\n  width: iconSize,\n  height: iconSize,\n  border: '2px solid #ccc',\n  borderRadius: '100%'\n});\n\nconst CustomIcon = styled(Icon)({\n  width: iconSize,\n  height: iconSize,\n  color: '#64dd17',\n  '> svg': {\n    fontSize: iconSize // overwrite the list item style\n  }\n});\n\nconst Checkbox = ({ checked }) =>\n  checked ? <CustomIcon type=\"check-circle\" /> : <Circle />;\n\nexport default Checkbox;\n","import React from 'react';\nimport { List } from 'antd';\nimport { observer, inject } from 'mobx-react';\n\nimport Checkbox from '../components/Checkbox';\n\n@inject('todoList')\n@observer\nclass TodoListItem extends React.Component {\n  getDeleteFn = title => async e => {\n    const { todoList } = this.props;\n\n    await todoList.remove(title);\n  };\n  onChangeItemState = title => e => {\n    const { todoList } = this.props;\n\n    todoList.toggle(title);\n  };\n  render() {\n    const { item } = this.props;\n    return (\n      <List.Item\n        actions={[<span onClick={this.getDeleteFn(item.title)}>delete</span>]}\n        style={{ cursor: 'pointer' }}\n      >\n        <List.Item.Meta\n          avatar={<Checkbox checked={item.done} />}\n          title={item.title}\n          onClick={this.onChangeItemState(item.title)}\n        />\n      </List.Item>\n    );\n  }\n}\n\nexport default TodoListItem;\n","import styled from 'react-emotion';\nimport { Card } from 'antd';\n\nconst MyCard = styled(Card)({\n  boxShadow: '-1px 2px 24px -4px rgba(117,117,117,0.72)',\n  minWidth: 600\n});\n\nexport default MyCard;\n","import styled from 'react-emotion';\nimport { Input } from 'antd';\n\nconst MyInput = styled(Input)({\n  border: 'none',\n  boxShadow: 'none !important',\n  fontSize: '2rem'\n});\n\nexport default MyInput;\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { get } from 'lodash';\n\nimport Input from '../components/Input';\n\n@inject('todoList')\n@observer\nclass Search extends Component {\n  state = {\n    inputValue: ''\n  };\n  setInputValue = inputValue => {\n    if (this.props.setValue) {\n      this.props.setValue(inputValue);\n    }\n\n    this.setState({ inputValue });\n  };\n  getValue = e => get(e, 'nativeEvent.target.value') || '';\n  onType = e => {\n    const inputValue = this.getValue(e);\n    this.setInputValue(inputValue);\n  };\n  addItem = async e => {\n    const { todoList } = this.props;\n    const title = this.getValue(e).trim();\n    if (title && !todoList.getItem(title)) {\n      await todoList.add(title);\n      this.setInputValue('');\n    }\n  };\n  render() {\n    const inputValue = this.state.inputValue;\n    return (\n      <Input\n        placeholder=\"What's next?\"\n        size=\"large\"\n        value={inputValue}\n        onChange={this.onType}\n        onPressEnter={this.addItem}\n      />\n    );\n  }\n}\n\nexport default Search;\n","import { Component } from 'react';\n\nexport const fetch = async key => {\n  const retrievedObject = localStorage.getItem(key);\n  return retrievedObject ? JSON.parse(retrievedObject) : {};\n};\n\nclass Fetcher extends Component {\n  state = { data: null, loading: false };\n  componentDidMount() {\n    this.doFetch();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.id !== this.props.id) this.doFetch();\n  }\n  doFetch = async () => {\n    const { id } = this.props;\n    this.setState({ loading: true });\n    const fetchFn = this.props.fetch || fetch;\n    const data = await fetchFn(id);\n    this.setState({ data, loading: false });\n  };\n  render() {\n    const { children } = this.props;\n    const { data, loading } = this.state;\n    return children ? !loading && children({ data, loading }) : null;\n  }\n}\n\nexport default Fetcher;\n","import React from 'react';\n\nconst getEmptyText = inputValue =>\n  inputValue ? (\n    <>\n      <span>Press Enter to Add </span>\n      <span style={{ fontWeight: 'bold' }}>{inputValue}</span>\n    </>\n  ) : (\n    <span role=\"img\" aria-label=\"img\">\n      Go out and enjoy the sun 😎🍸️\n    </span>\n  );\n\nexport default getEmptyText;\n","import React from 'react';\nimport { List } from 'antd';\nimport { observer, inject } from 'mobx-react';\n\nimport TodoListItem from './TodoListItem';\nimport Card from '../components/Card';\nimport Search from './Search';\nimport { fetch } from '../Fetcher';\nimport getEmptyText from './getEmptyText';\n\nexport const TODO_LIST = 'todoList';\n\n@inject(TODO_LIST)\n@observer\nclass TodoList extends React.Component {\n  state = {\n    inputValue: ''\n  };\n  componentDidMount() {\n    this.loadTodoList();\n  }\n\n  loadTodoList = async () => {\n    const { todoList } = this.props;\n    const data = await fetch(TODO_LIST);\n    todoList.load(data);\n    return data;\n  };\n  getVisibleTodoItems = () => {\n    const { todoList } = this.props;\n    const { inputValue } = this.state;\n\n    return todoList.getSearchResults(inputValue);\n  };\n  setValue = inputValue => {\n    this.setState({ inputValue });\n  };\n  render() {\n    const { inputValue } = this.state;\n    const emptyText = getEmptyText(inputValue);\n    const todoItems = this.getVisibleTodoItems();\n\n    return (\n      <Card title={<Search setValue={this.setValue} />}>\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={todoItems}\n          locale={{ emptyText }}\n          renderItem={item => <TodoListItem item={item} />}\n        />\n      </Card>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\n\nimport Page from './components/Page';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n  render() {\n    return (\n      <Page>\n        <TodoList />\n      </Page>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from 'mobx-state-tree';\nimport { toJS } from 'mobx';\n\nconst TodoItem = types\n  .model('TodoItem', {\n    title: types.string,\n    done: false\n  })\n  .actions(self => ({\n    toggle() {\n      self.done = !self.done;\n    }\n  }));\n\nconst TodoListStore = types\n  .model('TodoListStore', {\n    items: types.array(TodoItem)\n  })\n  .actions(self => ({\n    add: title => {\n      self.items.push({ title, done: false });\n    },\n    remove: title => {\n      self.items = self.items.filter(item => item.title !== title);\n    },\n    load: items => {\n      self.items = items;\n    },\n    toggle: title => {\n      self.items.find(item => item.title === title).toggle();\n    }\n  }))\n  .views(self => ({\n    getSearchResults: searchTerm => {\n      const items = toJS(self.items);\n      return items.filter(item => item.title.includes(searchTerm));\n    },\n    getItem: title => {\n      const items = toJS(self.items);\n      return items.find(item => item.title === title);\n    }\n  }));\n\nexport default TodoListStore;\n","import { reaction } from 'mobx';\n\nimport TodoListStore from './TodoListStore';\n\nconst todoList = TodoListStore.create({\n  items: []\n});\n\nreaction(\n  () => todoList.items.map(item => item.toJSON()),\n  items => {\n    const data = JSON.stringify(items);\n    localStorage.setItem('todoList', data);\n  }\n);\n\nconst store = {\n  todoList\n};\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider {...store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}