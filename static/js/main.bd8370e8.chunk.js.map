{"version":3,"sources":["components/Page.js","components/Card.js","components/Input.js","Fetcher.js","App.js","serviceWorker.js","store/TodoListStore.js","index.js"],"names":["Page","styled","width","height","display","justifyContent","alignItems","paddingTop","background","MyCard","card_default","a","boxShadow","minWidth","MyInput","input_default","border","fontSize","Fetcher","state","data","loading","doFetch","_callee","id","regenerator_default","wrap","_context","prev","next","_this","props","setState","fetch","sent","stop","this","prevProps","prevState","children","_this$state","Component","App","inject","observer","inputValue","load","key","todoList","retrievedObject","localStorage","getItem","JSON","parse","onChangeItemState","title","checked","toggle","onType","e","get_default","addItem","nativeEvent","target","value","trim","add","removeItem","_ref2","Object","asyncToGenerator","mark","_callee2","_context2","remove","_x2","apply","arguments","getVisibleTodoItems","getSearchResults","_this2","todoItems","react_default","createElement","components_Page","src_Fetcher","Card","Input","placeholder","size","onChange","onPressEnter","list_default","itemLayout","dataSource","locale","emptyText","Fragment","style","fontWeight","role","aria-label","renderItem","item","Item","actions","onClick","Meta","avatar","switch_default","defaultChecked","done","defaultProps","Boolean","window","location","hostname","match","TodoItem","types","model","string","self","TodoListStore","items","array","push","filter","toConsumableArray","concat","find","views","searchTerm","includes","create","reaction","setItem","stringify","ReactDOM","render","index_module","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd8370e8.chunk.js","sourcesContent":["import styled from 'react-emotion';\n\nconst Page = styled('div')({\n  width: '100%',\n  height: '100vh',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'flex-start',\n  paddingTop: 250,\n  background: '#f7f7f7'\n});\n\nexport default Page;\n","import styled from 'react-emotion';\nimport { Card } from 'antd';\n\nconst MyCard = styled(Card)({\n  boxShadow: '-1px 2px 24px -4px rgba(117,117,117,0.72)',\n  minWidth: 600\n});\n\nexport default MyCard;\n","import styled from 'react-emotion';\nimport { Input } from 'antd';\n\nconst MyInput = styled(Input)({\n  border: 'none',\n  boxShadow: 'none !important',\n  fontSize: '2rem'\n});\n\nexport default MyInput;\n","import { Component } from 'react';\n\nclass Fetcher extends Component {\n  state = { data: null, loading: false };\n  componentDidMount() {\n    this.doFetch();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.id !== this.props.id) this.doFetch();\n  }\n  doFetch = async () => {\n    const { id } = this.props;\n    this.setState({ loading: true });\n    const data = await this.props.fetch(id);\n    this.setState({ data, loading: false });\n  };\n  render() {\n    const { children } = this.props;\n    const { data, loading } = this.state;\n    return children ? !loading && children({ data, loading }) : null;\n  }\n}\n\nexport default Fetcher;\n","import React, { Component } from 'react';\nimport { List, Switch } from 'antd';\nimport { observer, inject } from 'mobx-react';\nimport { get } from 'lodash';\n\nimport Page from './components/Page';\nimport Card from './components/Card';\nimport Input from './components/Input';\nimport Fetcher from './Fetcher';\n\nconst key = 'todoList';\n\n@inject(key)\n@observer\nclass App extends Component {\n  static defaultProps = { key };\n  state = {\n    inputValue: ''\n  };\n  load = key => {\n    const { todoList } = this.props;\n    const retrievedObject = localStorage.getItem(key);\n    const data = retrievedObject ? JSON.parse(retrievedObject) : {};\n    todoList.load(data);\n    return data;\n  };\n\n  onChangeItemState = title => checked => {\n    const { todoList } = this.props;\n\n    todoList.toggle(title);\n  };\n  onType = e =>\n    this.setState({ inputValue: get(e, 'nativeEvent.target.value') });\n  addItem = async e => {\n    const { todoList } = this.props;\n\n    const title = e.nativeEvent.target.value.trim();\n    if (title) {\n      await todoList.add(title);\n      this.setState({ inputValue: '' });\n    }\n  };\n  removeItem = title => async e => {\n    const { todoList } = this.props;\n\n    await todoList.remove(title);\n  };\n\n  getVisibleTodoItems = () => {\n    const { inputValue } = this.state;\n    const { todoList } = this.props;\n\n    return todoList.getSearchResults(inputValue);\n  };\n  render() {\n    const { inputValue } = this.state;\n    const { key } = this.props;\n    const todoItems = this.getVisibleTodoItems();\n    return (\n      <Page>\n        <Fetcher fetch={this.load} id={key} />\n        <Card\n          title={\n            <Input\n              placeholder=\"What's next?\"\n              size=\"large\"\n              value={inputValue}\n              onChange={this.onType}\n              onPressEnter={this.addItem}\n            />\n          }\n        >\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={todoItems}\n            locale={{\n              emptyText: inputValue ? (\n                <>\n                  <span>Press Enter to Add </span>\n                  <span style={{ fontWeight: 'bold' }}>{inputValue}</span>\n                </>\n              ) : (\n                <span role=\"img\" aria-label=\"img\">\n                  Go out and enjoy the sun 😎🍸️\n                </span>\n              )\n            }}\n            renderItem={item => (\n              <List.Item\n                actions={[\n                  <span onClick={this.removeItem(item.title)}>delete</span>\n                ]}\n              >\n                <List.Item.Meta\n                  avatar={\n                    <Switch\n                      defaultChecked={!item.done}\n                      onChange={this.onChangeItemState(item.title)}\n                    />\n                  }\n                  title={item.title}\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      </Page>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from 'mobx-state-tree';\n\nconst TodoItem = types\n  .model('TodoItem', {\n    title: types.string,\n    done: false\n  })\n  .actions(self => ({\n    toggle() {\n      self.done = !self.done;\n    }\n  }));\n\nconst TodoListStore = types\n  .model('TodoStore', {\n    items: types.array(TodoItem)\n  })\n  .actions(self => ({\n    add: title => {\n      self.items.push({ title, done: false });\n    },\n    remove: title => {\n      self.items = self.items.filter(item => item.title !== title);\n    },\n    load: items => {\n      self.items = items ? [...self.items, ...items] : self.items;\n    },\n    toggle: title => {\n      self.items.find(item => item.title === title).toggle();\n    }\n  }))\n  .views(self => ({\n    getSearchResults: searchTerm =>\n      self.items.filter(item => item.title.includes(searchTerm))\n  }));\n\nexport default TodoListStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport TodoListStore from './store/TodoListStore';\nimport { Provider } from 'mobx-react';\nimport { reaction } from 'mobx';\n\nconst todoList = TodoListStore.create({\n  items: []\n});\n\nreaction(\n  () => [...todoList.items],\n  items => localStorage.setItem('todoList', JSON.stringify(items))\n);\n\nReactDOM.render(\n  <Provider todoList={todoList}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}