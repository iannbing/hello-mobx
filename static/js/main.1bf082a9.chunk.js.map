{"version":3,"sources":["components/Page.js","components/Card.js","components/Input.js","App.js","serviceWorker.js","store/todoStore.js","index.js"],"names":["Page","styled","width","height","display","justifyContent","alignItems","paddingTop","background","MyCard","card_default","a","boxShadow","minWidth","MyInput","input_default","border","fontSize","App","inject","observer","state","inputValue","onChangeItemState","title","checked","_this","props","todoStore","todos","find","item","toggle","onType","e","setState","get_default","addItem","_callee","regenerator_default","wrap","_context","prev","next","nativeEvent","target","value","trim","add","stop","this","removeItem","remove","getVisibleTodos","getSearchResults","_this2","react_default","createElement","components_Page","Card","Input","placeholder","size","onChange","onPressEnter","list_default","itemLayout","dataSource","locale","emptyText","style","fontWeight","renderItem","Item","actions","onClick","Meta","avatar","switch_default","defaultChecked","done","Component","Boolean","window","location","hostname","match","Todo","types","model","string","self","array","push","filter","views","searchTerm","includes","create","ReactDOM","render","index_module","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAYeA,EAVFC,YAAO,MAAPA,CAAc,CACzBC,MAAO,OACPC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,aACZC,WAAY,IACZC,WAAY,uCCDCC,EALAR,YAAOS,EAAAC,EAAPV,CAAa,CAC1BW,UAAW,4CACXC,SAAU,gCCIGC,EANCb,YAAOc,EAAAJ,EAAPV,CAAc,CAC5Be,OAAQ,OACRJ,UAAW,kBACXK,SAAU,SCuFGC,EArFdC,YAAO,eACPC,yNAECC,MAAQ,CACNC,WAAY,MAEdC,kBAAoB,SAAAC,GAAK,OAAI,SAAAC,GACLC,EAAKC,MAAnBC,UAEEC,MAAMC,KAAK,SAAAC,GAAI,OAAIA,EAAKP,QAAUA,IAAOQ,aAErDC,OAAS,SAAAC,GAAC,OACRR,EAAKS,SAAS,CAAEb,WAAYc,IAAIF,EAAG,iCACrCG,8CAAU,SAAAC,EAAMJ,GAAN,IAAAN,EAAAJ,EAAA,OAAAe,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACAf,EAAcF,EAAKC,MAAnBC,YAEFJ,EAAQU,EAAEU,YAAYC,OAAOC,MAAMC,QAHjC,CAAAN,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAKAf,EAAUoB,IAAIxB,GALd,OAMNE,EAAKS,SAAS,CAAEb,WAAY,KANtB,wBAAAmB,EAAAQ,SAAAX,EAAAY,iEASVC,WAAa,SAAA3B,GAAK,OAAI,SAAAU,GACER,EAAKC,MAAnBC,UAEEwB,OAAO5B,OAGnB6B,gBAAkB,WAAM,IACd/B,EAAeI,EAAKL,MAApBC,WAGR,OAFsBI,EAAKC,MAAnBC,UAES0B,iBAAiBhC,4EAE3B,IAAAiC,EAAAL,KACC5B,EAAe4B,KAAK7B,MAApBC,WACFO,EAAQqB,KAAKG,kBACnB,OACEG,EAAA7C,EAAA8C,cAACC,EAAD,KACEF,EAAA7C,EAAA8C,cAACE,EAAD,CACEnC,MACEgC,EAAA7C,EAAA8C,cAACG,EAAD,CACEC,YAAY,eACZC,KAAK,QACLhB,MAAOxB,EACPyC,SAAUb,KAAKjB,OACf+B,aAAcd,KAAKb,WAIvBmB,EAAA7C,EAAA8C,cAAAQ,EAAAtD,EAAA,CACEuD,WAAW,aACXC,WAAYtC,EACZuC,OAAQ,CACNC,UACEb,EAAA7C,EAAA8C,cAAA,iCACqB,IACnBD,EAAA7C,EAAA8C,cAAA,QAAMa,MAAO,CAAEC,WAAY,SAAWjD,KAI5CkD,WAAY,SAAAzC,GAAI,OACdyB,EAAA7C,EAAA8C,cAAAQ,EAAAtD,EAAM8D,KAAN,CACEC,QAAS,CACPlB,EAAA7C,EAAA8C,cAAA,QAAMkB,QAASpB,EAAKJ,WAAWpB,EAAKP,QAApC,YAGFgC,EAAA7C,EAAA8C,cAAAQ,EAAAtD,EAAM8D,KAAKG,KAAX,CACEC,OACErB,EAAA7C,EAAA8C,cAAAqB,EAAAnE,EAAA,CACEoE,gBAAiBhD,EAAKiD,KACtBjB,SAAUR,EAAKhC,kBAAkBQ,EAAKP,SAG1CA,MAAOO,EAAKP,qBAxEZyD,qBCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uEChBAC,EAAOC,IACVC,MAAM,OAAQ,CACbjE,MAAOgE,IAAME,OACbV,MAAM,IAEPN,QAAQ,SAAAiB,GAAI,MAAK,CAChB3D,OADgB,WAEd2D,EAAKX,MAAQW,EAAKX,SA6BTpD,EAzBG4D,IACfC,MAAM,YAAa,CAClB5D,MAAO2D,IAAMI,MAAML,KAEpBb,QAAQ,SAAAiB,GAAI,MAAK,CAChB3C,IAAK,SAAAxB,GACHmE,EAAK9D,MAAMgE,KAAK,CAAErE,QAAOwD,MAAM,KAEjC5B,OAAQ,SAAA5B,GACNmE,EAAK9D,MAAQ8D,EAAK9D,MAAMiE,OAAO,SAAA/D,GAAI,OAAIA,EAAKP,QAAUA,QAGzDuE,MAAM,SAAAJ,GAAI,MAAK,CACdrC,iBAAkB,SAAA0C,GAAU,OAC1BL,EAAK9D,MAAMiE,OAAO,SAAA/D,GAAI,OAAIA,EAAKP,MAAMyE,SAASD,SAGxBE,OAAO,CACjCrE,MAAO,CACL,CACEL,MAAO,iBCzBb2E,IAASC,OACP5C,EAAA7C,EAAA8C,cAAC4C,EAAA,EAAD,CAAUzE,UAAWA,GACnB4B,EAAA7C,EAAA8C,cAAC6C,EAAD,OAEFC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1bf082a9.chunk.js","sourcesContent":["import styled from 'react-emotion';\n\nconst Page = styled('div')({\n  width: '100%',\n  height: '100vh',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'flex-start',\n  paddingTop: 250,\n  background: '#f7f7f7'\n});\n\nexport default Page;\n","import styled from 'react-emotion';\nimport { Card } from 'antd';\n\nconst MyCard = styled(Card)({\n  boxShadow: '-1px 2px 24px -4px rgba(117,117,117,0.72)',\n  minWidth: 600\n});\n\nexport default MyCard;\n","import styled from 'react-emotion';\nimport { Input } from 'antd';\n\nconst MyInput = styled(Input)({\n  border: 'none',\n  boxShadow: 'none !important',\n  fontSize: '2rem'\n});\n\nexport default MyInput;\n","import React, { Component } from 'react';\nimport { List, Switch } from 'antd';\nimport { observer, inject } from 'mobx-react';\nimport { get } from 'lodash';\n\nimport Page from './components/Page';\nimport Card from './components/Card';\nimport Input from './components/Input';\n@inject('todoStore')\n@observer\nclass App extends Component {\n  state = {\n    inputValue: ''\n  };\n  onChangeItemState = title => checked => {\n    const { todoStore } = this.props;\n\n    todoStore.todos.find(item => item.title === title).toggle();\n  };\n  onType = e =>\n    this.setState({ inputValue: get(e, 'nativeEvent.target.value') });\n  addItem = async e => {\n    const { todoStore } = this.props;\n\n    const title = e.nativeEvent.target.value.trim();\n    if (title) {\n      await todoStore.add(title);\n      this.setState({ inputValue: '' });\n    }\n  };\n  removeItem = title => e => {\n    const { todoStore } = this.props;\n\n    todoStore.remove(title);\n  };\n\n  getVisibleTodos = () => {\n    const { inputValue } = this.state;\n    const { todoStore } = this.props;\n\n    return todoStore.getSearchResults(inputValue);\n  };\n  render() {\n    const { inputValue } = this.state;\n    const todos = this.getVisibleTodos();\n    return (\n      <Page>\n        <Card\n          title={\n            <Input\n              placeholder=\"What's next?\"\n              size=\"large\"\n              value={inputValue}\n              onChange={this.onType}\n              onPressEnter={this.addItem}\n            />\n          }\n        >\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={todos}\n            locale={{\n              emptyText: (\n                <span>\n                  Press Enter to Add{' '}\n                  <span style={{ fontWeight: 'bold' }}>{inputValue}</span>\n                </span>\n              )\n            }}\n            renderItem={item => (\n              <List.Item\n                actions={[\n                  <span onClick={this.removeItem(item.title)}>delete</span>\n                ]}\n              >\n                <List.Item.Meta\n                  avatar={\n                    <Switch\n                      defaultChecked={!item.done}\n                      onChange={this.onChangeItemState(item.title)}\n                    />\n                  }\n                  title={item.title}\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      </Page>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from 'mobx-state-tree';\n\nconst Todo = types\n  .model('Todo', {\n    title: types.string,\n    done: false\n  })\n  .actions(self => ({\n    toggle() {\n      self.done = !self.done;\n    }\n  }));\n\nconst TodoStore = types\n  .model('TodoStore', {\n    todos: types.array(Todo)\n  })\n  .actions(self => ({\n    add: title => {\n      self.todos.push({ title, done: false });\n    },\n    remove: title => {\n      self.todos = self.todos.filter(item => item.title !== title);\n    }\n  }))\n  .views(self => ({\n    getSearchResults: searchTerm =>\n      self.todos.filter(item => item.title.includes(searchTerm))\n  }));\n\nconst todoStore = TodoStore.create({\n  todos: [\n    {\n      title: 'Get coffee'\n    }\n  ]\n});\n\nexport default todoStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport todoStore from './store/todoStore';\nimport { Provider } from 'mobx-react';\n\nReactDOM.render(\n  <Provider todoStore={todoStore}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}