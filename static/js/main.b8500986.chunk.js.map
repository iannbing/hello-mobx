{"version":3,"sources":["components/Page.js","components/Card.js","components/Input.js","Fetcher.js","App.js","serviceWorker.js","store/TodoListStore.js","store/index.js","index.js"],"names":["Page","styled","width","height","display","justifyContent","alignItems","paddingTop","background","MyCard","card_default","a","boxShadow","minWidth","MyInput","input_default","border","fontSize","fetch","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","key","retrievedObject","wrap","_context","prev","next","localStorage","getItem","abrupt","JSON","parse","stop","this","_x","apply","arguments","TODO_LIST","Component","App","inject","observer","state","inputValue","loadTodoList","todoList","data","_this","props","sent","load","onChangeItemState","title","checked","toggle","onType","e","setState","get_default","addItem","_callee2","_context2","nativeEvent","target","value","trim","add","removeItem","_ref3","_callee3","_context3","remove","_x2","getVisibleTodoItems","getSearchResults","_this2","todoItems","react_default","createElement","components_Page","Card","Input","placeholder","size","onChange","onPressEnter","list_default","itemLayout","dataSource","locale","emptyText","Fragment","style","fontWeight","role","aria-label","renderItem","item","Item","actions","onClick","Meta","avatar","switch_default","defaultChecked","done","Boolean","window","location","hostname","match","TodoItem","types","model","string","self","items","array","push","filter","toConsumableArray","concat","find","views","searchTerm","includes","create","reaction","map","objectSpread","setItem","stringify","store","ReactDOM","render","index_module","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8500986.chunk.js","sourcesContent":["import styled from 'react-emotion';\n\nconst Page = styled('div')({\n  width: '100%',\n  height: '100vh',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'flex-start',\n  paddingTop: 250,\n  background: '#f7f7f7'\n});\n\nexport default Page;\n","import styled from 'react-emotion';\nimport { Card } from 'antd';\n\nconst MyCard = styled(Card)({\n  boxShadow: '-1px 2px 24px -4px rgba(117,117,117,0.72)',\n  minWidth: 600\n});\n\nexport default MyCard;\n","import styled from 'react-emotion';\nimport { Input } from 'antd';\n\nconst MyInput = styled(Input)({\n  border: 'none',\n  boxShadow: 'none !important',\n  fontSize: '2rem'\n});\n\nexport default MyInput;\n","import { Component } from 'react';\n\nexport const fetch = async key => {\n  const retrievedObject = localStorage.getItem(key);\n  return retrievedObject ? JSON.parse(retrievedObject) : {};\n};\n\nclass Fetcher extends Component {\n  state = { data: null, loading: false };\n  componentDidMount() {\n    this.doFetch();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.id !== this.props.id) this.doFetch();\n  }\n  doFetch = async () => {\n    const { id } = this.props;\n    this.setState({ loading: true });\n    const fetchFn = this.props.fetch || fetch;\n    const data = await fetchFn(id);\n    this.setState({ data, loading: false });\n  };\n  render() {\n    const { children } = this.props;\n    const { data, loading } = this.state;\n    return children ? !loading && children({ data, loading }) : null;\n  }\n}\n\nexport default Fetcher;\n","import React, { Component } from 'react';\nimport { List, Switch } from 'antd';\nimport { observer, inject } from 'mobx-react';\nimport { get } from 'lodash';\n\nimport Page from './components/Page';\nimport Card from './components/Card';\nimport Input from './components/Input';\nimport { fetch } from './Fetcher';\n\nconst TODO_LIST = 'todoList';\n\n@inject(TODO_LIST)\n@observer\nclass App extends Component {\n  state = {\n    inputValue: ''\n  };\n\n  componentDidMount() {\n    this.loadTodoList();\n  }\n\n  loadTodoList = async () => {\n    const { todoList } = this.props;\n    const data = await fetch(TODO_LIST);\n    todoList.load(data);\n    return data;\n  };\n\n  onChangeItemState = title => checked => {\n    const { todoList } = this.props;\n\n    todoList.toggle(title);\n  };\n  onType = e =>\n    this.setState({ inputValue: get(e, 'nativeEvent.target.value') });\n  addItem = async e => {\n    const { todoList } = this.props;\n\n    const title = e.nativeEvent.target.value.trim();\n    if (title) {\n      await todoList.add(title);\n      this.setState({ inputValue: '' });\n    }\n  };\n  removeItem = title => async e => {\n    const { todoList } = this.props;\n\n    await todoList.remove(title);\n  };\n\n  getVisibleTodoItems = () => {\n    const { inputValue } = this.state;\n    const { todoList } = this.props;\n\n    return todoList.getSearchResults(inputValue);\n  };\n  render() {\n    const { inputValue } = this.state;\n    const todoItems = this.getVisibleTodoItems();\n    return (\n      <Page>\n        <Card\n          title={\n            <Input\n              placeholder=\"What's next?\"\n              size=\"large\"\n              value={inputValue}\n              onChange={this.onType}\n              onPressEnter={this.addItem}\n            />\n          }\n        >\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={todoItems}\n            locale={{\n              emptyText: inputValue ? (\n                <>\n                  <span>Press Enter to Add </span>\n                  <span style={{ fontWeight: 'bold' }}>{inputValue}</span>\n                </>\n              ) : (\n                <span role=\"img\" aria-label=\"img\">\n                  Go out and enjoy the sun 😎🍸️\n                </span>\n              )\n            }}\n            renderItem={item => (\n              <List.Item\n                actions={[\n                  <span onClick={this.removeItem(item.title)}>delete</span>\n                ]}\n              >\n                <List.Item.Meta\n                  avatar={\n                    <Switch\n                      defaultChecked={!item.done}\n                      onChange={this.onChangeItemState(item.title)}\n                    />\n                  }\n                  title={item.title}\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      </Page>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from 'mobx-state-tree';\n\nconst TodoItem = types\n  .model('TodoItem', {\n    title: types.string,\n    done: false\n  })\n  .actions(self => ({\n    toggle() {\n      self.done = !self.done;\n    }\n  }));\n\nconst TodoListStore = types\n  .model('TodoListStore', {\n    items: types.array(TodoItem)\n  })\n  .actions(self => ({\n    add: title => {\n      self.items.push({ title, done: false });\n    },\n    remove: title => {\n      self.items = self.items.filter(item => item.title !== title);\n    },\n    load: items => {\n      self.items = items ? [...self.items, ...items] : self.items;\n    },\n    toggle: title => {\n      self.items.find(item => item.title === title).toggle();\n    }\n  }))\n  .views(self => ({\n    getSearchResults: searchTerm =>\n      self.items.filter(item => item.title.includes(searchTerm))\n  }));\n\nexport default TodoListStore;\n","import { reaction } from 'mobx';\n\nimport TodoListStore from './TodoListStore';\n\nconst todoList = TodoListStore.create({\n  items: []\n});\n\nreaction(\n  () => todoList.items.map(item => ({ ...item })),\n  items => {\n    localStorage.setItem('todoList', JSON.stringify(items));\n  }\n);\n\nconst store = {\n  todoList\n};\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider {...store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}